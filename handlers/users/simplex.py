from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils.markdown import hlink, hbold, hcode

from loader import dp
from states.Simplex import Simplex
import logging

from utils.simplex.App import parse_equation, parse_function_coefs, App

keyboard_start = ReplyKeyboardMarkup(row_width=2,
                                     resize_keyboard=True,
                                     one_time_keyboard=True,
                                     keyboard=[[
                                         KeyboardButton(text='–î–∞'),
                                         KeyboardButton(text='–ù–µ—Ç')
                                     ]])
keyboard_maxmin = ReplyKeyboardMarkup(row_width=2,
                                      one_time_keyboard=True,
                                      resize_keyboard=True,
                                      keyboard=[[
                                          KeyboardButton('–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º üìà'),
                                          KeyboardButton('–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º  üìâ')
                                      ]])

STOP_WORD = '–°–¢–û–ü'


@dp.message_handler(Command('simplex'))
async def start_simplex(message: types.Message, state: FSMContext):
    await message.answer('–≠—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏ –ø–æ–∏—Å–∫–∞ max/min —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö. '
                         f'–ó–∞ {hlink("—Ä–µ—à–∞—Ç–µ–ª—å", "https://github.com/JettPy/Simlex-Table")} —Å–ø–∞—Å–∏–±–æ @suslik13.\n' \
                         f'{hbold("–ñ–µ–ª–∞–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? ;)")}\n'
                         f'–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ {STOP_WORD} –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å ü•∞',
                         reply_markup=keyboard_start,
                         disable_web_page_preview=True)
    await Simplex.Start.set()


@dp.message_handler(state=Simplex.Start)
async def stop_or_variables(message: types.Message, state: FSMContext):
    if message.text in ['–ù–µ—Ç', STOP_WORD]:
        await state.reset_state(with_data=True)
    elif message.text != '–î–∞':
        await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
                             reply_markup=keyboard_start)
    else:
        await message.answer('–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:')
        await Simplex.NumVariables.set()


@dp.message_handler(state=Simplex.NumVariables)
async def enter_num_variables(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
    num_var = message.text
    if not num_var.isnumeric():
        await message.answer('–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
    else:
        async with state.proxy() as data:
            data['num_variables'] = num_var
        await message.answer('–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:')
        await Simplex.NumEquations.set()


@dp.message_handler(state=Simplex.NumEquations)
async def enter_num_equations(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
    num_eq = message.text
    if not num_eq.isnumeric():
        await message.answer('–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
    else:
        async with state.proxy() as data:
            data['num_equations'] = num_eq
            data['num_entered_equations'] = 0
            data['matrix_a'] = []
            data['matrix_b'] = []
            data['signs'] = []
        await message.answer('–í–≤–µ–¥–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –∑–Ω–∞–∫–∏ –¥–ª—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è ‚Ññ1.'
                             '–ü—Ä–∏–º–µ—Ä: –¥–ª—è "x_1 + 2*x_2 + x_3 = 4" –≤–≤–µ–¥–∏—Ç–µ "1 2 1 == 4".'
                             '–ö–∞–∫ —Ç—ã —É–∂–µ –º–æ–≥ –∑–∞–º–µ—Ç–∏—Ç—å –¥–ª—è "=" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "==" –∏ –≤–º–µ—Å—Ç–æ "–±–æ–ª—å—à–µ" –∏ "–º–µ–Ω—å—à–µ"'
                             '–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è "–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ" –∏ "–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –£—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ –ø—Ä–∏ –≤–≤–æ–¥–µ üòã')
        await Simplex.Equations.set()


@dp.message_handler(state=Simplex.Equations)
async def enter_equations(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
    data = await state.get_data()
    num_entered_equations = int(data.get('num_entered_equations'))
    equation = message.text
    num_equations = int(data.get('num_equations'))
    num_variables = int(data.get('num_variables'))
    matrix_a = list(data.get('matrix_a'))
    matrix_b = list(data.get('matrix_b'))
    signs = list(data.get('signs'))

    is_error, error_str, (matrix_a_row, sign, b) = parse_equation(equation, num_variables)
    if is_error:
        await message.answer(f"{error_str}\n–ü–æ–ø—Ä–æ–±—É–π –µ—à—ë —Ä–∞–∑")
        return
    matrix_a.append(matrix_a_row)
    signs.append(sign)
    matrix_b.append(b)
    data['matrix_a'] = matrix_a
    data['signs'] = signs
    data['matrix_b'] = matrix_b
    if num_entered_equations + 1 == num_equations:
        await message.answer(
            "–í–≤–µ–¥–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—É—á–∏—Ç—ã–≤–∞—è —Å–≤–æ–±–æ–¥–Ω—ã–π —á–ª–µ–Ω –∏ –Ω–µ–≤–æ—à–µ–¥—à–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å 0):\n"
            f'–ü—Ä–∏–º–µ—Ä: –¥–ª—è {hbold("Z(x) = 2X_1 - X_2")} –≤–≤–µ–¥–∏ {hbold("2 -1 0")}')
        await Simplex.Function.set()
    else:
        data['num_entered_equations'] = num_entered_equations + 1
        await message.answer(f'–¢–µ–ø–µ—Ä—å —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è ‚Ññ{num_entered_equations + 1}. :)))')


@dp.message_handler(state=Simplex.Function)
async def enter_function(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
    function = message.text
    data = await state.get_data()
    num_variables = int(data.get('num_variables'))

    is_error, error_str, matrix_c = parse_function_coefs(function, num_variables)
    if is_error:
        await message.answer(f"{error_str}\n–ü–æ–ø—Ä–æ–±—É–π –µ—à—ë —Ä–∞–∑")
        return
    async with state.proxy() as data:
        data['matrix_c'] = matrix_c
    await message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ–º?',
                         reply_markup=keyboard_maxmin)
    await Simplex.Maximize.set()


@dp.message_handler(state=Simplex.Maximize)
async def solve_equations(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
    if message.text not in ['–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º', '–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º']:
        await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
                             reply_markup=keyboard_maxmin)
    else:
        data = await state.get_data()
        num_vars = data.get('num_variables')
        num_equats = data.get('num_equations')
        matrix_a = data.get('matrix_a')
        matrix_b = data.get('matrix_b')
        matrix_c = data.get('matrix_c')
        signs = data.get('signs')
        is_maximize = message.text == '–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º'

        app = App(variables_count=num_vars,
                  equations_count=num_equats,
                  matrix_a=matrix_a,
                  matrix_b=matrix_b,
                  matrix_c=matrix_c,
                  signs=signs,
                  is_maximize=is_maximize)
        app.do_artificial_basis(False)
        #
        # input_str = f'{num_vars}\n' \
        #             f'{num_equats}\n' \
        #             f'{equats}\n' \
        #             f'{function}\n' \
        #             f'{maximize}\n\n'
        # command = './simplex_table'
        # logging.info(command)
        # answer = await execute_command(command, input_str)
        temp = open(f"answer.txt", 'r')
        # temp.write(answer)
        # temp.close()
        answer = "\n".join(temp.readlines())
        if len(answer) <= 4000:
            await message.answer('–ü—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç:\n'
                                 f'{hcode(answer)}\n'
                                 f'–î–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ–∞–π–ª–æ–º –Ω–∏–∂–µ.')
        await message.answer_document(document=InputFile(f"answer.txt"))
        await state.reset_state(with_data=True)


def is_number(s: str):
    if s.count('.') != 0:
        try:
            float(s)
            return True
        except ValueError:
            return False
    else:
        try:
            int(s)
            return True
        except ValueError:
            return False
